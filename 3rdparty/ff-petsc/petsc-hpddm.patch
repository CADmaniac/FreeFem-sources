diff --git a/petsc-3.13.5/src/ksp/ksp/impls/hpddm/hpddm.cxx b/petsc-3.13.5/src/ksp/ksp/impls/hpddm/hpddm.cxx
index ba91ba30f8..a6a1403689 100644
--- a/petsc-3.13.5/src/ksp/ksp/impls/hpddm/hpddm.cxx
+++ b/petsc-3.13.5/src/ksp/ksp/impls/hpddm/hpddm.cxx
@@ -325,7 +325,7 @@ static PetscErrorCode KSPHPDDMGetDeflationSpace_HPDDM(KSP ksp, Mat *U)
     op = data->op;
   }
   array = op->storage();
-  N2 = op->k();
+  N2 = op->k().second;
   if (!array) *U = NULL;
   else {
     ierr = KSPGetOperators(ksp, &A, NULL);CHKERRQ(ierr);
diff --git a/petsc-3.13.5/config/BuildSystem/config/package.py b/petsc-3.13.5/config/BuildSystem/config/package.py
index 802626e4ded02dd1f46d0077ef5a331d8df8ca9e..bd8c3800ea8b3c188dfde49bfdbb0798c2d90f06 100644
--- a/petsc-3.13.5/config/BuildSystem/config/package.py
+++ b/petsc-3.13.5/config/BuildSystem/config/package.py
@@ -1085,6 +1085,8 @@ If its a remote branch, use: origin/'+self.gitcommit+' for commit.')
   def configure(self):
     if hasattr(self, 'download_solaris') and config.setCompilers.Configure.isSolaris(self.log):
       self.download = self.download_solaris
+    if hasattr(self, 'download_darwin') and config.setCompilers.Configure.isDarwin(self.log):
+      self.download = self.download_darwin
     if self.download and self.argDB['download-'+self.downloadname.lower()] and (not self.framework.batchBodies or self.installwithbatch):
       self.argDB['with-'+self.package] = 1
       downloadPackageVal = self.argDB['download-'+self.downloadname.lower()]
diff --git a/petsc-3.13.5/config/BuildSystem/config/packages/MUMPS.py b/petsc-3.13.5/config/BuildSystem/config/packages/MUMPS.py
index 15e6d8d1db27caf23b7d22a1d536011ddcc7b8de..f106cd3b93628534e0f8d5f14e4825775497d086 100644
--- a/petsc-3.13.5/config/BuildSystem/config/packages/MUMPS.py
+++ b/petsc-3.13.5/config/BuildSystem/config/packages/MUMPS.py
@@ -3,11 +3,12 @@ import config.package
 class Configure(config.package.Package):
   def __init__(self, framework):
     config.package.Package.__init__(self, framework)
-    self.version          = '5.2.1'
+    self.version          = '5.3.3'
     self.versionname      = 'MUMPS_VERSION'
-    self.gitcommit        = 'v'+self.version+'-p2'
+    self.gitcommit        = 'v'+self.version+'-p1'
     self.download         = ['git://https://bitbucket.org/petsc/pkg-mumps.git',
                              'https://bitbucket.org/petsc/pkg-mumps/get/'+self.gitcommit+'.tar.gz']
+    self.download_darwin  = ['https://bitbucket.org/petsc/pkg-mumps/get/v5.2.1-p2.tar.gz']
     self.downloaddirnames = ['petsc-pkg-mumps','MUMPS']
     self.liblist          = [['libcmumps.a','libdmumps.a','libsmumps.a','libzmumps.a','libmumps_common.a','libpord.a'],
                             ['libcmumps.a','libdmumps.a','libsmumps.a','libzmumps.a','libmumps_common.a','libpord.a','libpthread.a'],
@@ -115,7 +116,9 @@ class Configure(config.package.Package):
       extra_fcflags = '-dusty -dcfuns '
     elif config.setCompilers.Configure.isGfortran100plus(self.setCompilers.getCompiler(), self.log):
       extra_fcflags = '-fallow-argument-mismatch '
-    g.write('OPTF    = '+extra_fcflags+self.setCompilers.getCompilerFlags().replace('-Wall','').replace('-Wshadow','').replace('-Mfree','') +'\n')
+    g.write('OPTF    = '+extra_fcflags+self.setCompilers.getCompilerFlags().replace('-Wall','').replace('-Wshadow','').replace('-Mfree','')+'\n')
+    if self.blasLapack.mkl and int(self.blasLapack.foundversion) >= 110300:
+      g.write('OPTF   += -DGEMMT_AVAILABLE \n')
     g.write('OUTF = -o \n')
     self.setCompilers.popLanguage()
 
diff --git a/petsc-3.13.5/config/BuildSystem/config/packages/hypre.py b/petsc-3.13.5/config/BuildSystem/config/packages/hypre.py
index 4d915c312f633bf7c15bac1b2b6d6380c53c963d..c3fb82d7fbaca713382b45ba1efc2a0fffdab16b 100644
--- a/petsc-3.13.5/config/BuildSystem/config/packages/hypre.py
+++ b/petsc-3.13.5/config/BuildSystem/config/packages/hypre.py
@@ -4,13 +4,12 @@ import os
 class Configure(config.package.GNUPackage):
   def __init__(self, framework):
     config.package.GNUPackage.__init__(self, framework)
-    self.maxversion      = '2.18.2'
+    self.version         = '2.19.0'
     self.minversion      = '2.14'
     self.versionname     = 'HYPRE_RELEASE_VERSION'
     self.versioninclude  = 'HYPRE_config.h'
     self.requiresversion = 1
-    #self.gitcommit       = 'v'+self.version
-    self.gitcommit       = '93baaa8c9' # v2.18.2+valgrind-fix
+    self.gitcommit       = 'v'+self.version
     self.download        = ['git://https://github.com/hypre-space/hypre','https://github.com/hypre-space/hypre/archive/'+self.gitcommit+'.tar.gz']
     self.functions       = ['HYPRE_IJMatrixCreate']
     self.includes        = ['HYPRE.h']
@@ -34,7 +33,7 @@ class Configure(config.package.GNUPackage):
     self.scalar     = framework.require('PETSc.options.scalarTypes',self)
     self.deps       = [self.mpi,self.blasLapack,self.cxxlibs,self.mathlib]
     if self.setCompilers.isCrayKNL(None,self.log):
-      self.installwithbatch  = 0
+      self.installwithbatch = 0
 
   def formGNUConfigureArgs(self):
     self.packageDir = os.path.join(self.packageDir,'src')
diff --git a/petsc-3.13.5/src/mat/impls/hypre/mhypre.c b/petsc-3.13.5/src/mat/impls/hypre/mhypre.c
index 6da65e43ccf24aec346e7b46cce174bfcb3c2a59..7c7eed0306ae84cdbbdc4cb0b88e583252809df0 100644
--- a/petsc-3.13.5/src/mat/impls/hypre/mhypre.c
+++ b/petsc-3.13.5/src/mat/impls/hypre/mhypre.c
@@ -58,10 +58,7 @@ static PetscErrorCode MatHYPRE_IJMatrixPreallocate(Mat A_d, Mat A_o, HYPRE_IJMat
   }
   if (done_d) {    /* set number of nonzeros in HYPRE IJ matrix */
     if (!done_o) { /* only diagonal part */
-      ierr = PetscMalloc1(n_d,&nnz_o);CHKERRQ(ierr);
-      for (i=0; i<n_d; i++) {
-        nnz_o[i] = 0;
-      }
+      ierr = PetscCalloc1(n_d,&nnz_o);CHKERRQ(ierr);
     }
 #if PETSC_PKG_HYPRE_VERSION_GE(2,16,0)
     { /* If we don't do this, the columns of the matrix will be all zeros! */
@@ -70,8 +67,11 @@ static PetscErrorCode MatHYPRE_IJMatrixPreallocate(Mat A_d, Mat A_o, HYPRE_IJMat
       hypre_AuxParCSRMatrixDestroy(aux_matrix);
       hypre_IJMatrixTranslator(ij) = NULL;
       PetscStackCallStandard(HYPRE_IJMatrixSetDiagOffdSizes,(ij,nnz_d,nnz_o));
+      /* it seems they partially fixed it in 2.19.0 */
+#if PETSC_PKG_HYPRE_VERSION_LT(2,19,0)
       aux_matrix = (hypre_AuxParCSRMatrix*)hypre_IJMatrixTranslator(ij);
       hypre_AuxParCSRMatrixNeedAux(aux_matrix) = 1;
+#endif
     }
 #else
     PetscStackCallStandard(HYPRE_IJMatrixSetDiagOffdSizes,(ij,nnz_d,nnz_o));
@@ -1211,7 +1211,7 @@ static PetscErrorCode MatAssemblyEnd_HYPRE(Mat A, MatAssemblyType mode)
   PetscStackCallStandard(HYPRE_IJMatrixAssemble,(hA->ij));
   /* The assembly routine destroys the aux_matrix, we recreate it here by calling HYPRE_IJMatrixInitialize */
   /* If the option MAT_SORTED_FULL is set to true, the indices and values can be passed to hypre directly, so we don't need the aux_matrix */
-  if(!hA->sorted_full) {
+  if (!hA->sorted_full) {
     hypre_AuxParCSRMatrix *aux_matrix;
 
     /* call destroy just to make sure we do not leak anything */
@@ -1223,7 +1223,11 @@ static PetscErrorCode MatAssemblyEnd_HYPRE(Mat A, MatAssemblyType mode)
     PetscStackCallStandard(HYPRE_IJMatrixInitialize,(hA->ij));
     aux_matrix = (hypre_AuxParCSRMatrix*)hypre_IJMatrixTranslator(hA->ij);
     hypre_AuxParCSRMatrixNeedAux(aux_matrix) = 1; /* see comment in MatHYPRESetPreallocation_HYPRE */
+#if PETSC_PKG_HYPRE_VERSION_LT(2,19,0)
     PetscStackCallStandard(hypre_AuxParCSRMatrixInitialize,(aux_matrix));
+#else
+    PetscStackCallStandard(hypre_AuxParCSRMatrixInitialize_v2,(aux_matrix,HYPRE_MEMORY_HOST));
+#endif
   }
   if (hA->x) PetscFunctionReturn(0);
   ierr = PetscLayoutSetUp(A->rmap);CHKERRQ(ierr);
@@ -1370,9 +1374,7 @@ static PetscErrorCode MatHYPRESetPreallocation_HYPRE(Mat A, PetscInt dnz, const
     if (!onnz) {
       ierr = PetscMalloc1(A->rmap->n,&honnz);CHKERRQ(ierr);
       for (i=0;i<A->rmap->n;i++) honnz[i] = onz;
-    } else {
-      honnz = (HYPRE_Int*)onnz;
-    }
+    } else honnz = (HYPRE_Int*)onnz;
     /* SetDiagOffdSizes sets hypre_AuxParCSRMatrixNeedAux(aux_matrix) = 0, since it seems
        they assume the user will input the entire row values, properly sorted
        In PETSc, we don't make such an assumption and set this flag to 1,
